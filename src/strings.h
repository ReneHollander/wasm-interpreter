#ifndef STRINGS_H
#define STRINGS_H

#include <assert.h>
#include "instruction.h"

static const char *opcode2str(opcode_t opcode) {
    switch (opcode) {
        case OP_UNREACHABLE:
            return "unreachable";
        case OP_NOP:
            return "nop";
        case OP_BLOCK:
            return "block";
        case OP_LOOP:
            return "loop";
        case OP_IF:
            return "if";
        case OP_ELSE:
            return "else";
        case OP_BR:
            return "br";
        case OP_BR_IF:
            return "br_if";
        case OP_BR_TABLE:
            return "br_table";
        case OP_RETURN:
            return "return";
        case OP_CALL:
            return "call";
        case OP_CALL_INDIRECT:
            return "call_indirect";
        case OP_DROP:
            return "drop";
        case OP_SELECT:
            return "select";
        case OP_LOCAL_GET:
            return "local.get";
        case OP_LOCAL_SET:
            return "local.set";
        case OP_LOCAL_TEE:
            return "local.tee";
        case OP_GLOBAL_GET:
            return "global.get";
        case OP_GLOBAL_SET:
            return "global.set";
        case OP_I32_LOAD:
            return "i32.load";
        case OP_I64_LOAD:
            return "i64.load";
        case OP_F32_LOAD:
            return "f32.load";
        case OP_F64_LOAD:
            return "f64.load";
        case OP_I32_LOAD8_S:
            return "i32.load8_s";
        case OP_I32_LOAD8_U:
            return "i32.load8_u";
        case OP_I32_LOAD16_S:
            return "i32.load16_s";
        case OP_I32_LOAD16_U:
            return "i32.load16_u";
        case OP_I64_LOAD8_S:
            return "i64.load8_s";
        case OP_I64_LOAD8_U:
            return "i64.load8_u";
        case OP_I64_LOAD16_S:
            return "i64.load16_s";
        case OP_I64_LOAD16_U:
            return "i64.load16_u";
        case OP_I64_LOAD32_S:
            return "i64.load32_s";
        case OP_I64_LOAD32_U:
            return "i64.load32_u";
        case OP_I32_STORE:
            return "i32.store";
        case OP_I64_STORE:
            return "i64.store";
        case OP_F32_STORE:
            return "f32.store";
        case OP_F64_STORE:
            return "f64.store";
        case OP_I32_STORE8:
            return "i32.store8";
        case OP_I32_STORE16:
            return "i32.store16";
        case OP_I64_STORE8:
            return "i64.store8";
        case OP_I64_STORE16:
            return "i64.store16";
        case OP_I64_STORE32:
            return "i64.store32";
        case OP_MEMORY_SIZE:
            return "memory.size";
        case OP_MEMORY_GROW:
            return "memory.grow";
        case OP_I32_CONST:
            return "i32.const";
        case OP_I64_CONST:
            return "i64.const";
        case OP_F32_CONST:
            return "f32.const";
        case OP_F64_CONST:
            return "f64.const";
        case OP_I32_EQZ:
            return "i32.eqz";
        case OP_I32_EQ:
            return "i32.eq";
        case OP_I32_NE:
            return "i32.ne";
        case OP_I32_LT_S:
            return "i32.lt_s";
        case OP_I32_LT_U:
            return "i32.lt_u";
        case OP_I32_GT_S:
            return "i32.gt_s";
        case OP_I32_GT_U:
            return "i32.gt_u";
        case OP_I32_LE_S:
            return "i32.le_s";
        case OP_I32_LE_U:
            return "i32.le_u";
        case OP_I32_GE_S:
            return "i32.ge_s";
        case OP_I32_GE_U:
            return "i32.ge_u";
        case OP_I64_EQZ:
            return "i64.eqz";
        case OP_I64_EQ:
            return "i64.eq";
        case OP_I64_NE:
            return "i64.ne";
        case OP_I64_LT_S:
            return "i64.lt_s";
        case OP_I64_LT_U:
            return "i64.lt_u";
        case OP_I64_GT_S:
            return "i64.gt_s";
        case OP_I64_GT_U:
            return "i64.gt_u";
        case OP_I64_LE_S:
            return "i64.le_s";
        case OP_I64_LE_U:
            return "i64.le_u";
        case OP_I64_GE_S:
            return "i64.ge_s";
        case OP_I64_GE_U:
            return "i64.ge_u";
        case OP_F32_EQ:
            return "f32.eq";
        case OP_F32_NE:
            return "f32.ne";
        case OP_F32_LT:
            return "f32.lt";
        case OP_F32_GT:
            return "f32.gt";
        case OP_F32_LE:
            return "f32.le";
        case OP_F32_GE:
            return "f32.ge";
        case OP_F64_EQ:
            return "f64.eq";
        case OP_F64_NE:
            return "f64.ne";
        case OP_F64_LT:
            return "f64.lt";
        case OP_F64_GT:
            return "f64.gt";
        case OP_F64_LE:
            return "f64.le";
        case OP_F64_GE:
            return "f64.ge";
        case OP_I32_CLZ:
            return "i32.clz";
        case OP_I32_CTZ:
            return "i32.ctz";
        case OP_I32_POPCNT:
            return "i32.popcnt";
        case OP_I32_ADD:
            return "i32.add";
        case OP_I32_SUB:
            return "i32.sub";
        case OP_I32_MUL:
            return "i32.mul";
        case OP_I32_DIV_S:
            return "i32.div_s";
        case OP_I32_DIV_U:
            return "i32.div_u";
        case OP_I32_REM_S:
            return "i32.rem_s";
        case OP_I32_REM_U:
            return "i32.rem_u";
        case OP_I32_AND:
            return "i32.and";
        case OP_I32_OR:
            return "i32.or";
        case OP_I32_XOR:
            return "i32.xor";
        case OP_I32_SHL:
            return "i32.shl";
        case OP_I32_SHR_U:
            return "i32.shr_u";
        case OP_I32_SHR_S:
            return "i32.shr_s";
        case OP_I32_ROTL:
            return "i32.rotl";
        case OP_I32_ROTR:
            return "i32.rotr";
        case OP_I64_CLZ:
            return "i64.clz";
        case OP_I64_CTZ:
            return "i64.ctz";
        case OP_I64_POPCNT:
            return "i64.popcnt";
        case OP_I64_ADD:
            return "i64.add";
        case OP_I64_SUB:
            return "i64.sub";
        case OP_I64_MUL:
            return "i64.mul";
        case OP_I64_DIV_S:
            return "i64.div_s";
        case OP_I64_DIV_U:
            return "i64.div_u";
        case OP_I64_REM_S:
            return "i64.rem_s";
        case OP_I64_REM_U:
            return "i64.rem_u";
        case OP_I64_AND:
            return "i64.and";
        case OP_I64_OR:
            return "i64.or";
        case OP_I64_XOR:
            return "i64.xor";
        case OP_I64_SHL:
            return "i64.shl";
        case OP_I64_SHR_U:
            return "i64.shr_u";
        case OP_I64_SHR_S:
            return "i64.shr_s";
        case OP_I64_ROTL:
            return "i64.rotl";
        case OP_I64_ROTR:
            return "i64.rotr";
        case OP_F32_ABS:
            return "f32.abs";
        case OP_F32_NEG:
            return "f32.neg";
        case OP_F32_CEIL:
            return "f32.ceil";
        case OP_F32_FLOOR:
            return "f32.floor";
        case OP_F32_TRUNC:
            return "f32.trunc";
        case OP_F32_NEAREST:
            return "f32.nearest";
        case OP_F32_SQRT:
            return "f32.sqrt";
        case OP_F32_ADD:
            return "f32.add";
        case OP_F32_SUB:
            return "f32.sub";
        case OP_F32_MUL:
            return "f32.mul";
        case OP_F32_DIV:
            return "f32.div";
        case OP_F32_MIN:
            return "f32.min";
        case OP_F32_MAX:
            return "f32.max";
        case OP_F32_COPYSIGN:
            return "f32.copysign";
        case OP_F64_ABS:
            return "f64.abs";
        case OP_F64_NEG:
            return "f64.neg";
        case OP_F64_CEIL:
            return "f64.ceil";
        case OP_F64_FLOOR:
            return "f64.floor";
        case OP_F64_TRUNC:
            return "f64.trunc";
        case OP_F64_NEAREST:
            return "f64.nearest";
        case OP_F64_SQRT:
            return "f64.sqrt";
        case OP_F64_ADD:
            return "f64.add";
        case OP_F64_SUB:
            return "f64.sub";
        case OP_F64_MUL:
            return "f64.mul";
        case OP_F64_DIV:
            return "f64.div";
        case OP_F64_MIN:
            return "f64.min";
        case OP_F64_MAX:
            return "f64.max";
        case OP_F64_COPYSIGN:
            return "f64.copysign";
        case OP_I32_WRAP_I64:
            return "i32.wrap_i64";
        case OP_I32_TRUNC_F32_S:
            return "i32.trunc_f32_s";
        case OP_I32_TRUNC_F32_U:
            return "i32.trunc_f32_u";
        case OP_I32_TRUNC_F64_S:
            return "i32.trunc_f64_s";
        case OP_I32_TRUNC_F64_U:
            return "i32.trunc_f64_u";
        case OP_I64_EXTEND_I32_S:
            return "i64.extend_i32_s";
        case OP_I64_EXTEND_I32_U:
            return "i64.extend_i32_u";
        case OP_I64_TRUNC_F32_S:
            return "i64.trunc_f32_s";
        case OP_I64_TRUNC_F32_U:
            return "i64.trunc_f32_u";
        case OP_I64_TRUNC_F64_S:
            return "i64.trunc_f64_s";
        case OP_I64_TRUNC_F64_U:
            return "i64.trunc_f64_u";
        case OP_F32_CONVERT_I32_S:
            return "f32.convert_i32_s";
        case OP_F32_CONVERT_I32_U:
            return "f32.convert_i32_u";
        case OP_F32_CONVERT_I64_S:
            return "f32.convert_i64_s";
        case OP_F32_CONVERT_I64_U:
            return "f32.convert_i64_u";
        case OP_F32_DEMOTE_F64:
            return "f32.demote_f64";
        case OP_F64_CONVERT_I32_S:
            return "f64.convert_i32_s";
        case OP_F64_CONVERT_I32_U:
            return "f64.convert_i32_u";
        case OP_F64_CONVERT_I64_S:
            return "f64.convert_i64_s";
        case OP_F64_CONVERT_I64_U:
            return "f64.convert_i64_u";
        case OP_F64_PROMOTE_F32:
            return "f64.promote_f32";
        case OP_I32_REINTERPRET_F32:
            return "i32.reinterpret_f32";
        case OP_I64_REINTERPRET_F64:
            return "i64.reinterpret_f64";
        case OP_F32_REINTERPRET_F32:
            return "f32.reinterpret_f32";
        case OP_F64_REINTERPRET_I64:
            return "f64.reinterpret_f64";
        default:
            return "unknown";
    }
}

#endif // STRINGS_H